-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    slug character varying(255) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(60) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(60) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone,
    avatar integer NOT NULL DEFAULT 1,
    onboarding integer DEFAULT 0,
    hireable boolean,
    about character varying(500) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT unique_email UNIQUE (email),
    CONSTRAINT users_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.images
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    url character varying(300) COLLATE pg_catalog."default" NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    size integer,
    created_at timestamp without time zone NOT NULL,
    CONSTRAINT images_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.organizations
(
    id serial NOT NULL,
    owner_id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    slug character varying(100) COLLATE pg_catalog."default",
    logo_id integer DEFAULT 1,
    created_at timestamp without time zone NOT NULL,
    about character varying(400) COLLATE pg_catalog."default",
    CONSTRAINT organizations_pkey PRIMARY KEY (id),
    CONSTRAINT organizations_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.user_sessions
(
    id text COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    expires_at timestamp without time zone NOT NULL,
    CONSTRAINT user_sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_tags
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    type character varying(30) COLLATE pg_catalog."default" NOT NULL,
    verified boolean DEFAULT false,
    value character varying(100) COLLATE pg_catalog."default" NOT NULL,
    link character varying(255) COLLATE pg_catalog."default",
    tag_order integer,
    CONSTRAINT user_tags_pkey PRIMARY KEY (id),
    CONSTRAINT unique_user_tag UNIQUE (user_id, type, value)
);

CREATE TABLE IF NOT EXISTS public.followers
(
    id serial NOT NULL,
    followed integer NOT NULL,
    follower integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    CONSTRAINT unique_follower UNIQUE (followed, follower)
);

CREATE TABLE IF NOT EXISTS public.experiences
(
    id serial NOT NULL,
    user_id integer,
    team_id boolean,
    organization_id boolean,
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(500) COLLATE pg_catalog."default" NOT NULL,
    public boolean NOT NULL DEFAULT false,
    type character varying(50) COLLATE pg_catalog."default" DEFAULT 'gallery'::character varying,
    created_at timestamp without time zone NOT NULL,
    CONSTRAINT experiences_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.experience_items
(
    id serial NOT NULL,
    user_id integer,
    team_id boolean,
    organization_id boolean,
    experience_id integer,
    title character varying(150) COLLATE pg_catalog."default" NOT NULL,
    description character varying(400) COLLATE pg_catalog."default",
    link character varying(500) COLLATE pg_catalog."default",
    attachments jsonb,
    created_at timestamp without time zone NOT NULL,
    date_start date,
    date_end date,
    CONSTRAINT experience_items_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_avatar FOREIGN KEY (avatar)
    REFERENCES public.images (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.images
    ADD CONSTRAINT images_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizations
    ADD CONSTRAINT organizations_logo_id_fkey FOREIGN KEY (logo_id)
    REFERENCES public.images (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.organizations
    ADD CONSTRAINT organizations_owner_id_fkey FOREIGN KEY (owner_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_sessions
    ADD CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_tags
    ADD CONSTRAINT user_tags_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.followers
    ADD CONSTRAINT followers_followed_fkey FOREIGN KEY (followed)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.followers
    ADD CONSTRAINT followers_follower_fkey FOREIGN KEY (follower)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.experiences
    ADD CONSTRAINT experiences_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.experience_items
    ADD CONSTRAINT experience_items_experience_id_fkey FOREIGN KEY (experience_id)
    REFERENCES public.experiences (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.experience_items
    ADD CONSTRAINT experience_items_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;